model Inventory {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  manufacturerName  String
  sku               String?
  image             String?
  dateOfManufacture String?
  hasDevice         Boolean? @default(false)

  status InventoryStatus @default(IN_STOCK)
  class  InventoryClass

  products ProductInventory[]

  inventoryCategoryId String?   @db.ObjectId
  inventoryCategory   Category? @relation(name: "InventoryToCategory", fields: [inventoryCategoryId], references: [id])

  devices Device[]

  inventorySubCategoryId String?   @db.ObjectId
  inventorySubCategory   Category? @relation(name: "InventoryToSubCategory", fields: [inventorySubCategoryId], references: [id])

  tenantId String @db.ObjectId
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  batches InventoryBatch[] // Relation to batch records

  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  deletedAt            DateTime?
  InventorySaleItem    InventorySaleItem[]
  InventoryReservation InventoryReservation[]

  @@map("inventories")
}

model InventoryBatch {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  costOfItem  Float?
  price       Float
  batchNumber Int

  numberOfStock     Int // Original quantity in this batch.
  remainingQuantity Int // Current remaining quantity in this batch

  creatorId      String? @db.ObjectId
  creatorDetails User?   @relation(fields: [creatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?
  reservedQuantity Int       @default(0) // Reserved but not yet sold

  inventoryId String     @db.ObjectId
  inventory   Inventory? @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  tenantId String @db.ObjectId
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  salesBatchAlocation      BatchAlocation[]
  storeAllocations         StoreBatchAllocation[]
  salesBatchAllocations    InventorySaleBatchAllocation[]
  InventoryBatchAllocation InventoryBatchAllocation[]

  @@index([inventoryId, tenantId])
  @@index([remainingQuantity]) // For availability queries
  @@map("inventory_batches")
}

//NOTE: Reservation

model InventoryReservation {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  reservationId    String // Groups multiple items in same reservation
  tenantId         String            @db.ObjectId
  inventoryId      String            @db.ObjectId
  customerId       String            @db.ObjectId
  quantity         Int
  unitPrice        Float
  totalPrice       Float
  batchAllocations String // JSON string of batch allocations
  status           ReservationStatus @default(ACTIVE)
  expiresAt        DateTime
  createdAt        DateTime          @default(now())
  completedAt      DateTime?
  cancelledAt      DateTime?

  // Relations
  inventory Inventory @relation(fields: [inventoryId], references: [id])
  customer  Customer  @relation(fields: [customerId], references: [id])
  tenant    Tenant    @relation(fields: [tenantId], references: [id])

  @@index([reservationId, tenantId])
  @@index([expiresAt]) // For cleanup queries
  @@index([status, expiresAt]) // For active reservation queries
  @@map("inventory_reservations")
}

enum ReservationStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

enum InventoryStatus {
  IN_STOCK
  OUT_OF_STOCK
  DISCONTINUED
}

enum InventoryClass {
  REGULAR
  RETURNED
  REFURBISHED
}

// Model for inventory batch allocations in sales
model InventorySaleBatchAllocation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  inventorySaleItemId String            @db.ObjectId
  inventorySaleItem   InventorySaleItem @relation(fields: [inventorySaleItemId], references: [id], onDelete: Cascade)

  inventoryBatchId String         @db.ObjectId
  inventoryBatch   InventoryBatch @relation(fields: [inventoryBatchId], references: [id])

  quantity  Int
  unitPrice Float

  tenantId String @db.ObjectId
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("inventory_sale_batch_allocations")
}
