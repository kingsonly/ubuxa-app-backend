model Product {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String?
  image           String?
  currency        String? @default("NGN")
  paymentModes    String?
  productCapacity Json? // Stored as JSON array
  eaasDetails     Json? // Stored as JSON object

  creatorId      String? @db.ObjectId
  creatorDetails User?   @relation(fields: [creatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  customers CustomerProducts[]

  saleItems SaleItem[]

  inventories ProductInventory[]

  tenantId String @db.ObjectId
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("products")
}

model ProductInventory {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  quantity    Int
  inventoryId String    @db.ObjectId
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  tenantId String @db.ObjectId
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // @@map("product_inventories")  //(best practice for consistency)

  @@unique([productId, inventoryId, tenantId])
}
